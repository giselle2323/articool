datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int     @default(autoincrement()) @id
  title     String
  body   String
  author    User  @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime ?  @updatedAt @map(name: "updated_at")
  tag  String ?
  links String ?
  comments         Comment[] //A post can have many comments
  likes         Like[] //A post cna have many likes
   @@map(name: "posts")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String
  email         String @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime ?  @updatedAt @map(name: "updated_at")
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  @@map(name: "users")
}

model Comment {
  id            Int       @default(autoincrement()) @id
  name          String
  body         String   
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
  user    User @relation(fields: [userId], references: [id])
  userId   Int
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime ?  @updatedAt @map(name: "updated_at")
  @@map(name: "comments")
}

model Like {
  id            Int       @default(autoincrement()) @id
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
  user    User @relation(fields: [userId], references: [id])
  userId   Int
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime ?  @updatedAt @map(name: "updated_at")
  @@map(name: "likes")
}